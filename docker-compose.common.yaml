services:
  # Database
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ratel
    volumes:
      - .build/postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratel-network

  postgres-init:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPASSWORD: postgres
    volumes:
      - ./scripts:/scripts
    # Command will be overridden in specific compose files
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 5s
      timeout: 3s
      retries: 10
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U postgres; do
          sleep 2
        done &&
        echo 'Creating ratel database...' &&
        psql -h postgres -U postgres -d postgres -c 'CREATE DATABASE ratel;' || echo 'Database might already exist' &&
        echo 'Running init.sql...' &&
        psql -h postgres -U postgres -d ratel -f /scripts/init.sql &&
        echo 'Database initialization completed' &&
        touch /tmp/init-complete &&
        sleep infinity
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ratel-network

  localstack:
    hostname: localstack
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=dynamodb,s3,sqs
      - DYNAMODB_SHARE_DB=1
      - SQS_ENDPOINT_STRATEGY=off
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ratel-network

  # DynamoDB initialization
  dynamodb-init:
    image: amazonlinux:2023
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./scripts:/scripts
    networks:
      - ratel-network
    command: ["bash", "/scripts/dynamo-init-entrypoint.sh"]
    depends_on:
      localstack:
        condition: service_healthy

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    ports:
      - "8081:8001"
    environment:
      - DYNAMO_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - dynamodb-init
    profiles:
      - admin
    networks:
      - ratel-network



  # SQS initialization
  sqs-init:
    image: amazon/aws-cli:latest
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    networks:
      - ratel-network
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        until aws --endpoint-url=http://localstack:4566 sqs list-queues >/dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Creating SQS queues...' &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name watermark-queue &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name artwork-image-queue &&
        echo 'SQS queues created successfully'
      "
    depends_on:
      localstack:
        condition: service_healthy

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0
    restart: unless-stopped
    ports:
      - "28080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
      HASURA_GRAPHQL_AUTH_HOOK: http://main-api:3000/v1/auth/hasura
      HASURA_GRAPHQL_AUTH_HOOK_MODE: POST
      HASURA_GRAPHQL_LOG_LEVEL: debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy
      main-api:
        condition: service_healthy
    networks:
      - ratel-network

  # Hasura table tracker
  hasura-init:
    image: hasura/graphql-engine:v2.40.0
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
    command: >
      sh -c "
        echo 'Waiting for Hasura to be ready...' &&
        until curl -s http://hasura:8080/healthz > /dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Tracking all tables in ratel database...' &&
        curl -X POST http://hasura:8080/v1/metadata \
          -H 'Content-Type: application/json' \
          -H 'X-Hasura-Admin-Secret: ratel_admin_secret' \
          -d '{\"type\": \"pg_track_all_tables\", \"args\": {\"source\": \"default\"}}' &&
        echo 'All tables tracked successfully'
      "
    networks:
      - ratel-network
    depends_on:
      hasura:
        condition: service_healthy

networks:
  ratel-network:
    driver: bridge
