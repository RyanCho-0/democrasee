services:
  # Database
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ratel
    ports:
      - "5432:5432"
    volumes:
      - .build/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratel-network

  postgres-init:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPASSWORD: postgres
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U postgres; do
          sleep 2
        done &&
        echo 'Creating ratel database...' &&
        psql -h postgres -U postgres -d postgres -c 'CREATE DATABASE ratel;' || echo 'Database might already exist' &&
        echo 'Running init.sql...' &&
        psql -h postgres -U postgres -d ratel -f /scripts/init.sql &&
        echo 'Database initialization completed' &&
        touch /tmp/init-complete &&
        sleep infinity
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ratel-network

  # Main API Service
  main-api:
    image: rust:1.89
    restart: always
    ports:
      - "3000:3000"
    environment:
      ENV: dev
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      MIGRATE: "true"
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: "aws-access-key-id"
      AWS_SECRET_ACCESS_KEY: "aws-secret-access-key"
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
    volumes:
      - .:/app
      - ./.build/target:/app/target
      - ./.build/main-api/target:/app/packages/main-api/target

    working_dir: /app
    command: ["bash", "scripts/api-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
    networks:
      - ratel-network

  # Web Frontend
  web:
    image: node:22.14
    restart: always
    volumes:
      - ./.build/node_modules:/app/node_modules
      - ./.build/web_node_modules:/app/ts-packages/web/node_modules
      - ./.build/pnpm-store:/app/.pnpm-store
      - .:/app
    working_dir: /app
    command: ["bash", "scripts/web-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    environment:
      PORT: 8080
      API_URL: "http://main-api:3000"
      GRAPHQL_URL: "http://hasura:8080/v1/graphql"
    ports:
      - "8080:8080"
    networks:
      - ratel-network

  # # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0
    restart: unless-stopped
    ports:
      - "28080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
      HASURA_GRAPHQL_AUTH_HOOK: http://main-api:3000/v1/auth/hasura
      HASURA_GRAPHQL_AUTH_HOOK_MODE: POST
      HASURA_GRAPHQL_LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      main-api:
        condition: service_healthy
    networks:
      - ratel-network

  # Hasura table tracker
  hasura-init:
    image: hasura/graphql-engine:v2.40.0
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
    command: >
      sh -c "
        echo 'Waiting for Hasura to be ready...' &&
        until curl -s http://hasura:8080/healthz > /dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Tracking all tables in ratel database...' &&
        curl -X POST http://hasura:8080/v1/metadata \
          -H 'Content-Type: application/json' \
          -H 'X-Hasura-Admin-Secret: ratel_admin_secret' \
          -d '{\"type\": \"pg_track_all_tables\", \"args\": {\"source\": \"default\"}}' &&
        echo 'All tables tracked successfully'
      "
    depends_on:
      hasura:
        condition: service_started
    networks:
      - ratel-network

  # LocalStack for AWS service emulation for DynamoDB
  localstack:
    hostname: "localstack"
    image: "localstack/localstack"
    ports:
      - "4566:4566"
    environment:
      - SERVICES=dynamodb,s3,sqs
      - DYNAMODB_SHARE_DB=1
      - SQS_ENDPOINT_STRATEGY=off
    networks:
      - ratel-network

  # DynamoDB initialization
  dynamodb-init:
    image: amazon/aws-cli:latest
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        until aws --endpoint-url=http://localstack:4566 dynamodb list-tables >/dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Creating ratel-local table with GSIs...' &&
        aws --endpoint-url=http://localstack:4566 dynamodb create-table --cli-input-json file:///scripts/dynamodb-schema.json &&
        echo 'ratel-local table and GSIs created successfully'
      "
    depends_on:
      - localstack
    networks:
      - ratel-network

  # DynamoDB Admin GUI
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    ports:
      - "8081:8001"
    environment:
      - DYNAMO_ENDPOINT=http://localstack:4566
    depends_on:
      - dynamodb-init
    networks:
      - ratel-network

  # SQS initialization
  sqs-init:
    image: amazon/aws-cli:latest
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        until aws --endpoint-url=http://localstack:4566 sqs list-queues >/dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Creating SQS queues...' &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name watermark-queue &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name artwork-image-queue &&
        echo 'SQS queues created successfully'
      "
    depends_on:
      - localstack
    networks:
      - ratel-network

  # Playwright E2E Testing
  # playwright:
  #   image: mcr.microsoft.com/playwright:v1.49.0-jammy
  #   working_dir: /app
  #   volumes:
  #     - .:/app
  #     - playwright-cache:/home/pwuser/.cache
  #   environment:
  #     CI: "true"
  #     PLAYWRIGHT_BASE_URL: "http://web:8080"
  #   command: >
  #     sh -c "
  #       echo 'Waiting for web service to be ready...' &&
  #       until curl -s http://web:8080 > /dev/null 2>&1; do
  #         sleep 2
  #       done &&
  #       echo 'Installing dependencies...' &&
  #       cd ts-packages/web &&
  #       npm install &&
  #       echo 'Running Playwright tests...' &&
  #       npm run test:e2e
  #     "
  #   depends_on:
  #     web:
  #       condition: service_started
  #     main-api:
  #       condition: service_healthy
  #   networks:
  #     - ratel-network
  #   profiles:
  #     - testing


  # # Fetcher Service
  fetcher:
    image: rust:1.89
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      - ./.build/target:/app/target
      - ./.build/fetcher/target:/app/packages/fetcher/target
    working_dir: /app
    environment:
      ENV: dev
      RUST_LOG: debug
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
    command: ["bash", "scripts/fetcher-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    networks:
      - ratel-network

  # # Image Worker Service
  # image-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.image-worker
  #   restart: unless-stopped
  #   environment:
  #     ENV: dev
  #     RUST_LOG: debug
  #     AWS_REGION: us-east-1
  #     # Disable AWS SQS for local development
  #     AWS_ACCESS_KEY_ID: ""
  #     AWS_SECRET_ACCESS_KEY: ""
  #   volumes:
  #     - ./uploads:/app/uploads
  #   networks:
  #     - ratel-network

  # Testing Services
  # Main API Testing Service
  main-api-test:
    image: rust:1.89
    volumes:
      - .:/app
      - ./.build/target:/app/target
      - ./.build/main-api/target:/app/packages/main-api/target
    working_dir: /app/packages/main-api
    environment:
      ENV: test
      RUST_LOG: debug
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
      AWS_ENDPOINT_URL_DYNAMODB: http://localstack:4566
      AWS_ENDPOINT_URL_SQS: http://localstack:4566
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      DUAL_WRITE_ENABLED: "true"
      DUAL_WRITE_TABLE_NAME: ratel-test
      DYNAMODB_TABLE_NAME: ratel-test
      TELEGRAM_TOKEN: ""
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
      localstack:
        condition: service_started
      dynamodb-init:
        condition: service_completed_successfully
      sqs-init:
        condition: service_completed_successfully
    networks:
      - ratel-network
    profiles:
      - testing
    command: >
      sh -c "
        echo 'Installing test dependencies...' &&
        cargo install cargo-binstall &&
        cargo binstall --no-confirm cargo-watch &&
        echo 'Running DynamoDB and SQS integration tests...' &&
        RUST_LOG=debug cargo test tests::dynamo_tests --features integration-tests -- --nocapture &&
        RUST_LOG=debug cargo test tests::sqs_tests --features integration-tests -- --nocapture &&
        echo 'All integration tests completed!'
      "

  # Playwright Testing Service  
  playwright-test:
    image: mcr.microsoft.com/playwright:v1.49.0-jammy
    working_dir: /app
    volumes:
      - .:/app
      - playwright-cache:/home/pwuser/.cache
    environment:
      CI: "true"
      PLAYWRIGHT_BASE_URL: "http://web:8080"
      # Test environment variables
      WAIT_TIMEOUT: 5000
      VISIBLE_TIMEOUT: 10000
      URL_TIMEOUT: 15000
      NEXT_PUBLIC_LOG_LEVEL: debug
    depends_on:
      web:
        condition: service_healthy
      main-api:
        condition: service_healthy
      hasura:
        condition: service_started
    networks:
      - ratel-network
    profiles:
      - testing
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        echo 'Installing dependencies...' &&
        npm install &&
        echo 'Running Playwright tests...' &&
        npm test
      "

  # Combined Testing Service (runs both main-api tests and playwright)
  integration-test:
    image: node:22.14
    working_dir: /app
    volumes:
      - .:/app
      - ./.build/node_modules:/app/node_modules
      - ./.build/target:/app/target
    environment:
      CI: "true"
      PLAYWRIGHT_BASE_URL: "http://web:8080"
      # Database and AWS settings for tests
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
      AWS_ENDPOINT_URL_DYNAMODB: http://localstack:4566
      AWS_ENDPOINT_URL_SQS: http://localstack:4566
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
    depends_on:
      web:
        condition: service_healthy
      main-api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - ratel-network
    profiles:
      - testing
    command: >
      sh -c "
        echo '🚀 Starting comprehensive integration tests...' &&
        echo '📦 Installing dependencies...' &&
        npm install &&
        npx playwright install --with-deps chromium &&
        echo '⏳ Waiting for all services to be fully ready...' &&
        sleep 60 &&
        echo '🧪 Running Playwright end-to-end tests...' &&
        npm test &&
        echo '✅ All integration tests completed successfully!'
      "


networks:
  ratel-network:
    driver: bridge

volumes:
  playwright-cache:
    driver: local
