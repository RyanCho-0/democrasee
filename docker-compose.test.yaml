services:
  # Database
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test
    ports:
      - "5432:5432"
    volumes:
      - test-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratel-test-network

  postgres-init:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPASSWORD: postgres
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U postgres; do
          sleep 2
        done &&
        echo 'Running init.sql...' &&
        psql -h postgres -U postgres -d test -f /scripts/init.sql &&
        echo 'Database initialization completed' &&
        touch /tmp/init-complete &&
        sleep infinity
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ratel-test-network

  # LocalStack for AWS service emulation
  localstack:
    hostname: "localstack"
    image: "localstack/localstack:3"
    ports:
      - "4566:4566"
    environment:
      - SERVICES=dynamodb,s3,sqs
      - DYNAMODB_SHARE_DB=1
      - SQS_ENDPOINT_STRATEGY=off
      - DEFAULT_REGION=ap-northeast-2
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ratel-test-network

  # DynamoDB initialization
  dynamodb-init:
    image: amazon/aws-cli:latest
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-northeast-2
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        until aws --endpoint-url=http://localstack:4566 dynamodb list-tables >/dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Creating ratel-local table with GSIs...' &&
        aws --endpoint-url=http://localstack:4566 dynamodb create-table --cli-input-json file:///scripts/dynamodb-schema.json &&
        echo 'ratel-local table and GSIs created successfully'
      "
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - ratel-test-network

  # SQS initialization
  sqs-init:
    image: amazon/aws-cli:latest
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-northeast-2
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        until aws --endpoint-url=http://localstack:4566 sqs list-queues >/dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Creating SQS queues...' &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name watermark-queue &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue \
          --queue-name artwork-image-queue &&
        echo 'SQS queues created successfully'
      "
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - ratel-test-network

  # Main API Service - Uses pre-built image
  main-api:
    image: main-api:pr-${GITHUB_SHA:-latest}
    restart: always
    ports:
      - "3000:3000"
    environment:
      ENV: dev
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/test
      MIGRATE: "true"
      AWS_REGION: ap-northeast-2
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_ENDPOINT_URL_DYNAMODB: http://localstack:4566
      AWS_ENDPOINT_URL_SQS: http://localstack:4566
      TELEGRAM_TOKEN: ""
      # Test environment variables
      DOMAIN: "test.ratel.foundation"
      AUTH_SECRET_KEY: "test-auth-secret"
      BASE_DOMAIN: "ratel.foundation"
      AUTH_DOMAIN: "test.ratel.foundation"
      JWT_SECRET_KEY: "test-jwt-secret"
      SLACK_CHANNEL_SPONSOR: "#test-channel"
      SLACK_CHANNEL_ABUSING: "#test-channel"
      SLACK_CHANNEL_MONITOR: "#test-channel"
      US_CONGRESS_KEY: "test-congress-key"
      BBS_BLS_X: "test-bbs-x"
      BBS_BLS_Y: "test-bbs-y"
      BBS_BLS_D: "test-bbs-d"
      BBS_BLS_CRV: "test-bbs-crv"
      P256_X: "test-p256-x"
      P256_Y: "test-p256-y"
      P256_D: "test-p256-d"
      P256_CRV: "test-p256-crv"
      KAIA_ENDPOINT: "https://public-en-kairos.node.kaia.io"
      KAIA_FEEPAYER_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      KAIA_FEEPAYER_ADDR: "0xFEEDFACE1234567890abcdef0123456789abcdef"
      KAIA_OWNER_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      KAIA_OWNER_ADDR: "0xFEEDFACE1234567890abcdef0123456789abcdef"
      BUCKET_NAME: "test-bucket"
      ASSET_DIR: "assets"
      CHIME_BUCKET: "test-chime-bucket"
      NONCELAB_TOKEN: "test-noncelab-token"
      PRIVATE_BUCKET_NAME: "test-private-bucket"
      NOVA_MICRO_MODEL_ID: "test-nova-micro"
      NOVA_LITE_MODEL_ID: "test-nova-lite"
      WATERMARK_QUEUE_URL: "http://localstack:4566/000000000000/watermark-queue"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
      localstack:
        condition: service_healthy
      dynamodb-init:
        condition: service_completed_successfully
      sqs-init:
        condition: service_completed_successfully
    networks:
      - ratel-test-network

  # Fetcher Service - Uses pre-built image
  fetcher:
    image: fetcher:pr-${GITHUB_SHA:-latest}
    restart: always
    ports:
      - "3001:3001"
    environment:
      ENV: dev
      RUST_LOG: debug
      PORT: 3001
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/test
      RPC_ENDPOINT: "http://localhost:3001"
      TELEGRAM_TOKEN: ""
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
    networks:
      - ratel-test-network

  # Web Frontend - Uses pre-built image
  web:
    image: web:pr-${GITHUB_SHA:-latest}
    restart: always
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      API_URL: "http://main-api:3000"
      GRAPHQL_URL: "http://hasura:8080/v1/graphql"
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: "http://localhost:3000"
      NEXT_PUBLIC_GRAPHQL_URL: "http://localhost:28080/v1/graphql"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    depends_on:
      main-api:
        condition: service_healthy
    networks:
      - ratel-test-network

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0
    restart: unless-stopped
    ports:
      - "28080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres:5432/test
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/test
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
      HASURA_GRAPHQL_AUTH_HOOK: http://main-api:3000/v1/auth/hasura
      HASURA_GRAPHQL_AUTH_HOOK_MODE: POST
      HASURA_GRAPHQL_LOG_LEVEL: debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 20
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
      main-api:
        condition: service_healthy
    networks:
      - ratel-test-network

  # Hasura table tracker
  hasura-init:
    image: hasura/graphql-engine:v2.40.0
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
    command: >
      sh -c "
        echo 'Waiting for Hasura to be ready...' &&
        until curl -s http://hasura:8080/healthz > /dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Tracking all tables in test database...' &&
        curl -X POST http://hasura:8080/v1/metadata \
          -H 'Content-Type: application/json' \
          -H 'X-Hasura-Admin-Secret: ratel_admin_secret' \
          -d '{\"type\": \"pg_track_all_tables\", \"args\": {\"source\": \"default\"}}' &&
        echo 'All tables tracked successfully'
      "
    depends_on:
      hasura:
        condition: service_healthy
    networks:
      - ratel-test-network

networks:
  ratel-test-network:
    driver: bridge

volumes:
  test-postgres-data:
    driver: local
